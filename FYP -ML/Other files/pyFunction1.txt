class Try:
        def __init__(self):
                pass
        def printhello():
		import numpy as np
		import pandas as pd
		from sklearn.feature_extraction.text import TfidfVectorizer
		from sklearn.model_selection import train_test_split
		from sklearn.metrics import accuracy_score, confusion_matrix
		from sklearn.model_selection import cross_val_score
		df=pd.read_csv('1_fake_new_dataset_3120.csv',encoding='windows-1252')#had some decode error. so used encoding
		conversion_dict={0:'False',1:'True'}
		df['label']=df['label'].replace(conversion_dict)#Replace 1,0 to real and fake
		import string
		import re
		def word_drop(text):
    			text=text.lower()
    			text=re.sub('\[.*?\]','',text)
    			text=re.sub("\\W","",text)
    			text=re.sub('https?://\S+|www\.\S+','',text)
    			text=re.sub('<.*?>+','',text)
    			text=re.sub('[%s]' % re.escape(string.punctuation),'',text)
    			text=re.sub('\n','',text)
    			text=re.sub('\w"\d\w"','',text)
    			return text
		df["text"]=df["text"].apply(word_drop)

		X_train, X_test,y_train, y_test=train_test_split(df['text'],df['label'],test_size=0.25,random_state=9,shuffle=True)
		tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.75)
		vec_train=tfidf_vectorizer.fit_transform(X_train.values.astype('U'))
		vec_test=tfidf_vectorizer.transform(X_test.values.astype('U'))
		from sklearn.neighbors import KNeighborsClassifier
		knn=KNeighborsClassifier(n_neighbors=2)
		knn.fit(vec_train,y_train)
		y_pred=knn.predict(vec_test)
                print(y_pred)
                return y_pred
obj=Try()
obj.printhello()